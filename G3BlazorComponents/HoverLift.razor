<style>
    .g3-hover-lift {
        transform: scale(1, 1);
        transform-origin: @originString;
        transition: @transitionTimeString;
    }

        .g3-hover-lift:hover {
            transform: scale(@Scale, @Scale);
        }
</style>

<div class="g3-hover-lift">
    @ChildContent
</div>

@code {
    private double transitionTime = 0.2;
    private string transitionTimeString = "0.2s";
    private string originString => $"{TransformOriginX * 100}% {TransformOriginY * 100}%";
    private double transformOriginX = 0.5;
    private double transformOriginY = 0.5;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public double Scale { get; set; } = 1.1;

    [Parameter]
    public double TransitionTime
    {
        get => transitionTime;
        set
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException(nameof(value), "TransitionTime must be greater than or equal to 0.");

            transitionTime = value;
            transitionTimeString = $"{transitionTime}s";
        }
    }


    [Parameter]
    public double TransformOriginY
    {
        get => transformOriginY;
        set 
        {
            if (value < 0 || value > 1)
                throw new ArgumentOutOfRangeException(nameof(value), "TransformOriginY must be between 0 and 1.");

            transformOriginY = value;
        }
    }
    

    [Parameter]
    public double TransformOriginX
    {
        get => transformOriginX;
        set
        {
            if (value < 0 || value > 1)
                throw new ArgumentOutOfRangeException(nameof(value), "TransformOriginX must be between 0 and 1.");

            transformOriginX = value;
        }
    }

}