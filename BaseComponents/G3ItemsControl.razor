@typeparam TItem
@inherits G3Control

@foreach (var dictionaryItem in dictionaryItems)
{
    <div @onclick="async x => await OnItemClickedAsync(dictionaryItem.Value)">
        @ItemTemplate(dictionaryItem.Value)
    </div>
}

@code {
    protected readonly IDictionary<int, TItem> dictionaryItems = new Dictionary<int, TItem>();
    protected IEnumerable<TItem> dataSource = Enumerable.Empty<TItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateItems();
    }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default;

    [Parameter]
    public IEnumerable<TItem> ItemsSource
    {
        get => dataSource ?? Enumerable.Empty<TItem>();
        set
        {
            dataSource = value;
            UpdateItems();
        }
    }

    [Parameter]
    public EventCallback<TItem> ItemClicked { get; set; }

    [Parameter]
    public TItem SelectedItem { get; set; } = default;

    protected async Task OnItemClickedAsync(TItem item)
    {
        SelectedItem = item;
        await ItemClicked.InvokeAsync(SelectedItem);
    }

    protected async void UpdateItems()
    {
        dictionaryItems.Clear();
        var counter = 0;

        foreach (var sourceItem in ItemsSource ?? Enumerable.Empty<TItem>())
        {
            if (sourceItem is TItem item)
            {
                dictionaryItems.Add(counter++, item);
            }
            else
            {
                throw new G3TypeExpectedException<TItem>();
            }
        }

        await InvokeAsync(StateHasChanged);
    }
}
